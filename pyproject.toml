[project]
name = "linear-claude-agent"
version = "0.1.0"
description = "Modern Python Linear Agent with FastAPI and Claude Code integration"
authors = [
    { name = "Claude Code Bot", email = "bot@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
keywords = ["linear", "claude", "agent", "fastapi", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Automation",
]

dependencies = [
    # Web Framework
    "fastapi[all]>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database & ORM
    "sqlalchemy[asyncio]>=2.0.20",
    "asyncpg>=0.29.0",
    "alembic>=1.12.0",
    
    # Configuration & Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    
    # Redis for caching
    "redis[hiredis]>=5.0.0",
    
    # Git operations
    "GitPython>=3.1.40",
    
    # Async utilities
    "asyncio-throttle>=1.0.2",
    
    # Logging
    "structlog>=23.2.0",
    
    # Templating
    "jinja2>=3.1.2",
    
    # Cryptography for token encryption
    "cryptography>=41.0.0",
    
    # Environment variables
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Code Quality
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing async HTTP
    
    # Development tools
    "pre-commit>=3.5.0",
    "ipython>=8.17.0",
    
    # Database testing
    "pytest-postgresql>=5.0.0",
    "aiosqlite>=0.19.0",  # For SQLite testing
]

production = [
    # Monitoring
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
    
    # Process management
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/claude-code-bot/linear-claude-agent"
Repository = "https://github.com/claude-code-bot/linear-claude-agent"
Documentation = "https://github.com/claude-code-bot/linear-claude-agent/blob/main/README.md"
Issues = "https://github.com/claude-code-bot/linear-claude-agent/issues"

[project.scripts]
linear-agent = "linear_agent.main:main"

# Build system configuration
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tool configurations
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function argument
    "ARG002", # unused method argument
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "SIM"]
"migrations/**/*" = ["ALL"]

[tool.ruff.isort]
known-first-party = ["linear_agent"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# SQLAlchemy plugin
plugins = ["sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

# Ignore missing stubs for external packages
[[tool.mypy.overrides]]
module = [
    "git.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=linear_agent",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["linear_agent"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]